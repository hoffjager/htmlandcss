Topic 5 - Webpage Styling using CSS

Topic Overview:

5.1 Construct and analyze styles that position content:
Positioning (float, relative, absolute, static, and fixed) max-width, overflow, height, width, align, display, inline vs. block, visibility, box model,
margins and padding. 

5.2 Construct and analyze styles that format text:
font-family, color, font-style, font-size, font-weight, font-variant, link colors, text formatting, text alignment, text decoration, indentation,
line-height, word-wrap, and letter-spacing.

5.3 Construct and analyze styles that format backgrounds and borders:
border-color, border-style, border-width, background properties, colors.

5.4 Construct and analyze styles that create a simple responsive layout:
Units of measurement (percentages, pixels, em, vw, vh), viewport and media query, frameworks and templates, working with breakpoints, grids.

Chapter 3: Styling Boxes
	Recognizing Content Boxes
	Changing Display Formats
	Sizing the Content Area
	Controlling Borders
	Adding Padding
	Setting Margins
	Painting Colors
	Repeating Backgrounds
	Positioning Backgrounds
	Summary

	Recognizing Content Boxes
Content on a web page is displayed in a number of invisible rectangular
boxes that are generated by the browser. These content boxes may be either
"block level" or "inline".
Block-level content boxes normally have line breaks before and after the
box, such as paragraph, heading and "div" elements.
Inline content boxes, on the other hand, do not add line breaks but are
simply created within lines of text, such as span, emphasis, and hyperlink
elements.
Each block-level content box comprises a core content area surrounded by
optional areas for padding, border, and margins.
Style rules can specify values for the padding, border, and margin properties
to control the appearance of content boxes.
These all apply to block-level boxes but some properties, such as width
and height, do not apply to inline boxes. Additionally, the margin and
padding properties of inline boxes only apply to either side of the
content – not the areas above and below the content.
Block-level content boxes are by default stacked on the page, one below
another, whereas inline content boxes appear within a blocklevel box, one
behind another.
When the padding, border, and margin properties all have a zero width the
content box will be the same size as the content area, determined by the
dimensions of the content.
Any padding, border, and margin areas that have a non-zero width are added
outside the content area, so the content size remains the same but the box
size increases.
The padding property extends the area around the content and inherits the
background color of the content area. The border property extends the area
around the content and any padding. The margin property extends the area
around the content, any padding, and any border, with a transparent background.

Refer to:
box.html
&
box.css

	Changing Display Formats
A web page relies upon the creation of block-level content boxes, to
determine its general layout, and the creation of inline content boxes
within the blocks to determine its precise layout.
This places great emphasis on whether an element is considered block-level
or inline to determine the display format.
Generally the default display format for each element will be the most
appropriate. For example, it's generally desirable to display list items
on individual lines in a block-level list.
The run-in and inline-block styles are not universally supported, so it
may be best to avoid them. They are included here for completeness.
The display format of an element can also be explicitly determined by a
style rule that assigns the block or inline keywords to that element's
display property. This means that content can be displayed in a different
format without changing the HTML tags. For example, list items can be
displayed on a single line with a display : inline declaration.
Where two block-level elements follow each other the first can be made to
be displayed as if it was an inline box within the beginning of the second
block by assigning its display property the run-in keyword. For example,
applying a run-in style rule to a heading that is followed by a paragraph
will display the heading apparently within the start of the paragraph block.
Additionally an inline content-box can have its display property assigned
an inline-block value to allow it to be displayed somewhat like a
block-level content box. The inline-block still appears inline, as usual,
but unlike regular inline content boxes its width and height properties
can be assigned values to control its size.

Refer to:
display.html
&
display.css

	Sizing the Content Area
When assigning any non-zero value to a property the declaration must
include a two-letter unit name to specify which unit of measurement to
apply. The CSS specification provides the following unit names representing
real world measurement:

inches:
	div {width: 1in}
centimeters, 2.54cm = 1 inch:
	div {height: 2.54cm}
millimeters, 1/10 of 1cm, 25.4mm = 1 inch:
	div {height: 25.4mm}
pt(points), font height where 72 points = 1 inch:
	div {font-size: 72pt}
pc(picas): font height where 6 picas = 1 inch:
	div {font-size: 6pc}

Zero values can be assigned using just a "0" number – without specifying
a unit name.

The CSS specification also provides the following unit names representing
relative values according to the viewing device:

em(fontsize):
Font size where 1em is equivalent to the height of a given font:
	div {font-size: 14pt}
	(1em = 14pt)
ex(fontsize):
Font size where 1ex is equivalent to the height of lowercase "x" in a
font (often 50% of 1em):
	div {font-size: 14pt}
	(1ex = 7pt)
px(pixels):
Representing the dots on a computer monitor where there are 1024 pixels
on each line when the monitor resolution is 1024×768:
	div {height: 100px}
A percentage value can also specify a relative size – where a value of
50% makes the target element half the size of its containing element.

Refer to:
size.html
&
size.css

	Controlling Borders
Each content box can have a border comprising border-width, border-color,
and border-style properties. A value can be specified to each of these
individual properties to apply a uniform border to all four sides of the
content box, or a spaceseparated list of values can be specified to apply
different borders to each side:

When two values are listed the first is applied to the top and bottom
borders.
When three values are listed the first is applied to the top border, the
second is applied to the left and right borders, and the third is applied
to the bottom border.
When four values are listed they are applied clockwise to the top, right,
bottom, and left borders.

The default border-width value is medium (a computed value), and the
default border-color value is inherited from the element's color property,
but the default border-style is none. This means that the border will not
be visible until a value is assigned – possible border-style values are
solid, double, dotted, dashed, groove, ridge, inset, outset, hidden, and
none.
Rather than creating separate style rules for the border-width,
border-color, and border-style properties it is simpler to use the CSS
shorthand technique that specifies a value for each of these three properties
to a border property as a spaceseparated list. This uniformly styles each
side of the content box with a border of the specified width, color, and
style. For example, a style rule declaration of border: 0.5in red dotted
would apply a half-inch wide red dotted border to all four sides of the
content box.
The outset border style can be used to create the appearance of a raised
button – and the inset border style can be used to create the appearance
of a depressed button.
If it is desirable to have different styles, the borders on each side of
a content box can be individually styled by creating rules for the
element's border-top, border-right, border-bottom, and border-left
properties. The CSS shorthand technique can also be used with these
properties to specify a width, color, and style for the individual side
as a space-separated list. For example, a style rule declaration of
border-bottom: 0.5in red dotted would apply a half-inch wide red dotted
border to just the bottom side of the content box.

Refer to:
borders.html
&
borders.css

	Adding Padding
